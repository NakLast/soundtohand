{"ast":null,"code":"doublearray = require(\"doublearray\");\nassert = require('assert');\nfs = require('fs');\nstopwords = require('stopwords-th');\n\nfunction TNTrie() {\n  var trie;\n  data = fs.readFileSync(__dirname + \"/bb\", \"utf8\");\n  base_buffer = new Int32Array(data.split(\",\"));\n  data = fs.readFileSync(__dirname + \"/cb\", \"utf8\");\n  check_buffer = new Int32Array(data.split(\",\"));\n  trie = doublearray.load(base_buffer, check_buffer);\n\n  this.prefixes = function (sentence) {\n    return trie.commonPrefixSearch(sentence);\n  };\n}\n\nfunction ThaiAnalyzer() {\n  var failSegmentRemainText = [];\n  var globalResult = [];\n  var result = [];\n  var inputWord;\n  var ascii_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  var digits = \"0123456789\";\n  var punctuation = \"!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\n  var printable = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\x0b\\x0c\";\n  var whitespace = \" \";\n  var trie = new TNTrie();\n  var multipleSafeResult = true;\n  var modeFlag = \"smart\";\n  var thai_unicode_char = 'กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะ ัาำ ิ ี ึ ื ุ ู ฺ ฿เแโใไๅๆ ็ ่ ้ ๊ ๋ ์ ํ ๐๑๒๓๔๕๖๗๘๙' + \"\\u0e4e\\u0e4f\\u0e5a\\u0e5b\";\n\n  this.isLeadingChar = function (char) {\n    return thai_unicode_char.replace(\" \", \"\").includes(char);\n  };\n\n  this.segmenting = function (InputString, option) {\n    option = typeof option !== 'undefined' ? option : {\n      filterStopword: false,\n      multiSolution: false,\n      verbose: false\n    };\n    filterStopword = typeof option.filterStopword !== 'undefined' ? option.filterStopword : false;\n    multiSolution = typeof option.multiSolution !== 'undefined' ? option.multiSolution : false;\n    verbose = typeof option.verbose !== 'undefined' ? option.verbose : false;\n    var Mode;\n    inputWord = InputString;\n    segmentResults = [];\n\n    if (multiSolution) {\n      Mode = \"Safe\";\n      this.safe_segment(InputString);\n      failSegmentRemainText = [];\n      segmentResults = globalResult.slice(0);\n    }\n\n    if (segmentResults.length == 0) {\n      Mode = \"Unsafe\";\n      this.unsafe_segment(InputString);\n      segmentResults = globalResult.slice(0);\n    }\n\n    var segmentedResult;\n    globalResult = [];\n    var segmentedSoln = [];\n\n    if (!multiSolution) {\n      segmentResults = [segmentResults[0]];\n    }\n\n    var FilteredResult = [];\n\n    if (filterStopword) {\n      segmentResults.map(function (solution) {\n        segmentedSoln = [];\n        solution.forEach(function (term) {\n          if (!stopwords.includes(term)) {\n            segmentedSoln.push(term);\n          }\n        });\n        FilteredResult.push(segmentedSoln.slice(0));\n      });\n\n      if (!multiSolution) {\n        segmentedResult = {\n          solution: FilteredResult[0]\n        };\n      } else {\n        segmentedResult = {\n          solution: FilteredResult\n        };\n      }\n    } else {\n      if (!multiSolution) {\n        segmentedResult = {\n          solution: segmentResults[0]\n        };\n      } else {\n        segmentedResult = {\n          solution: segmentResults\n        };\n      }\n    }\n\n    if (verbose) {\n      segmentedResult.push({\n        Mode\n      });\n    }\n\n    return segmentedResult;\n  };\n\n  this.safe_segment = function (remainText) {\n    if (failSegmentRemainText.includes(remainText)) return false;\n    if (!multipleSafeResult) if (globalResult.length > 0) return;\n    assert(result.join(\"\") + remainText == inputWord);\n\n    if (remainText.length > 0) {\n      var FirstChar = remainText[0];\n\n      if (this.isLeadingChar(FirstChar)) {\n        var Prefixes = trie.prefixes(remainText);\n        var resultOrCount = false;\n\n        for (var i = Prefixes.length - 1; i >= 0; i--) {\n          var selectedPrefix = Prefixes[i]['k'];\n          result.push(selectedPrefix);\n          suffixRemainText = remainText.substr(selectedPrefix.length);\n          var prefixResult = this.safe_segment(suffixRemainText);\n          result.pop();\n          resultOrCount = resultOrCount || prefixResult;\n        }\n\n        if (!resultOrCount) failSegmentRemainText.push(remainText);\n      } else {\n        if (printable.includes(FirstChar)) {\n          if (punctuation.includes(FirstChar)) {\n            var j = 0;\n\n            while (punctuation.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.safe_segment(remainText.substr(j));\n            result.pop();\n          }\n\n          if (whitespace.includes(FirstChar)) {\n            var j = 0;\n\n            while (whitespace.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.safe_segment(remainText.substr(j));\n            result.pop();\n          }\n\n          if (digits.includes(FirstChar)) {\n            var j = 0;\n\n            while (digits.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.safe_segment(remainText.substr(j), trie);\n            result.pop();\n          }\n\n          if (ascii_letters.includes(FirstChar)) {\n            var j = 0;\n\n            while (ascii_letters.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.safe_segment(remainText.substr(j));\n            result.pop();\n          }\n        } else {\n          result.push(remainText[0]);\n          this.safe_segment(remainText.substr(1));\n          result.pop();\n        }\n      }\n    } else {\n      globalResult.push(result.slice(0));\n      return true;\n    }\n  };\n\n  this.unsafe_segment = function (remainText) {\n    if (globalResult.length > 0) return false;\n    assert(result.join(\"\") + remainText == inputWord);\n\n    if (remainText.length > 0) {\n      var FirstChar = remainText[0];\n\n      if (this.isLeadingChar(FirstChar)) {\n        Prefixes = trie.prefixes(remainText);\n\n        for (i = Prefixes.length - 1; i >= 0; i--) {\n          result.push(Prefixes[i]['k']);\n          this.unsafe_segment(remainText.substr(Prefixes[i]['k'].length));\n          result.pop();\n        }\n\n        var j = 0;\n        var unsafePrefixes = \"\";\n\n        while (j < remainText.length) {\n          Prefixes = trie.prefixes(remainText.substr(j));\n          j++;\n\n          if (Prefixes.length > 0) {\n            unsafePrefixes = remainText.substr(0, j - 1);\n            break;\n          } else {\n            unsafePrefixes = remainText.substr(0, j);\n          }\n\n          if (j == remainText.length) {\n            unsafePrefixes = remainText;\n            break;\n          }\n\n          if (!this.isLeadingChar(remainText[j])) {\n            unsafePrefixes = remainText.substr(0, j);\n            break;\n          }\n        }\n\n        result.push(unsafePrefixes);\n        this.unsafe_segment(remainText.substr(unsafePrefixes.length));\n        result.pop();\n      } else {\n        if (printable.includes(FirstChar)) {\n          if (punctuation.includes(FirstChar)) {\n            var j = 0;\n\n            while (punctuation.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.unsafe_segment(remainText.substr(j));\n            result.pop();\n          }\n\n          if (whitespace.includes(FirstChar)) {\n            var j = 0;\n\n            while (whitespace.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.unsafe_segment(remainText.substr(j));\n            result.pop();\n          }\n\n          if (digits.includes(FirstChar)) {\n            var j = 0;\n\n            while (digits.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.unsafe_segment(remainText.substr(j));\n            result.pop();\n          }\n\n          if (ascii_letters.includes(FirstChar)) {\n            var j = 0;\n\n            while (ascii_letters.includes(remainText[j])) {\n              j += 1;\n              if (remainText.length == j) break;\n            }\n\n            result.push(remainText.substr(0, j));\n            this.unsafe_segment(remainText.substr(j));\n            result.pop();\n          }\n        } else {\n          result.push(remainText[0]);\n          this.unsafe_segment(remainText.substr(1));\n          result.pop();\n        }\n      }\n    } else {\n      globalResult.push(result.slice(0));\n    }\n  };\n}\n\nmodule.exports = ThaiAnalyzer;","map":{"version":3,"sources":["D:/Sorn/Project(NSC)/Code/project-nsc/soundtohand/node_modules/tnthai/tnthai.js"],"names":["doublearray","require","assert","fs","stopwords","TNTrie","trie","data","readFileSync","__dirname","base_buffer","Int32Array","split","check_buffer","load","prefixes","sentence","commonPrefixSearch","ThaiAnalyzer","failSegmentRemainText","globalResult","result","inputWord","ascii_letters","digits","punctuation","printable","whitespace","multipleSafeResult","modeFlag","thai_unicode_char","isLeadingChar","char","replace","includes","segmenting","InputString","option","filterStopword","multiSolution","verbose","Mode","segmentResults","safe_segment","slice","length","unsafe_segment","segmentedResult","segmentedSoln","FilteredResult","map","solution","forEach","term","push","remainText","join","FirstChar","Prefixes","resultOrCount","i","selectedPrefix","suffixRemainText","substr","prefixResult","pop","j","unsafePrefixes","module","exports"],"mappings":"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","sourcesContent":["doublearray = require(\"doublearray\")\nassert = require('assert')\nfs = require('fs')\nstopwords = require('stopwords-th')\n\nfunction TNTrie(){\n    var trie;\n   \n    data = fs.readFileSync(__dirname + \"/bb\",\"utf8\")\n    base_buffer = new Int32Array(data.split(\",\"))\n    data = fs.readFileSync(__dirname + \"/cb\",\"utf8\")\n    check_buffer = new Int32Array(data.split(\",\"))\n    trie = doublearray.load(base_buffer, check_buffer);\n\n    this.prefixes = function(sentence){\n        return trie.commonPrefixSearch(sentence)\n    }\n}\n\nfunction ThaiAnalyzer(){\n    var failSegmentRemainText = [];\n    var globalResult = [];\n    var result = [];\n    var inputWord;\n    var ascii_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var digits = \"0123456789\"\n    var punctuation = \"!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n    var printable = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\x0b\\x0c\"\n    var whitespace = \" \"\n    var trie = new TNTrie();\n    var multipleSafeResult = true\n    var modeFlag = \"smart\"\n    var thai_unicode_char = 'กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะ ัาำ ิ ี ึ ื ุ ู ฺ ฿เแโใไๅๆ ็ ่ ้ ๊ ๋ ์ ํ ๐๑๒๓๔๕๖๗๘๙' + \"\\u0e4e\\u0e4f\\u0e5a\\u0e5b\";\n\n    this.isLeadingChar = function(char){\n        return thai_unicode_char.replace(\" \",\"\").includes(char)\n    }\n\n    this.segmenting = function(InputString, option){\n            \n        option = (typeof option !== 'undefined') ? option : { filterStopword : false, multiSolution : false, verbose : false }\n\n        filterStopword = (typeof option.filterStopword !== 'undefined') ? option.filterStopword : false\n        multiSolution = (typeof option.multiSolution !== 'undefined') ? option.multiSolution : false\n        verbose = (typeof option.verbose !== 'undefined') ? option.verbose : false\n\n        var Mode\n        inputWord = InputString \n        segmentResults = []\n        if (multiSolution){\n            Mode = \"Safe\"\n            this.safe_segment(InputString)\n            failSegmentRemainText = []\n            segmentResults = globalResult.slice(0)\n        }\n        if (segmentResults.length == 0){\n            Mode = \"Unsafe\"\n            this.unsafe_segment(InputString)\n            segmentResults = globalResult.slice(0)\n        }\n        var segmentedResult;\n        globalResult = []\n        var segmentedSoln = []\n        if (!multiSolution){\n            segmentResults = [segmentResults[0]]\n        }\n        var FilteredResult = []\n        if (filterStopword){\n            segmentResults.map(function(solution){\n                segmentedSoln = []\n                solution.forEach(function(term){\n                    if (!stopwords.includes(term)){\n                        segmentedSoln.push(term)\n                    }\n                })\n                FilteredResult.push(segmentedSoln.slice(0))\n            })\n            if(!multiSolution){\n                segmentedResult = {solution:FilteredResult[0]}\n            }\n            else{\n                segmentedResult = {solution:FilteredResult}\n            }\n        }\n        else{\n            if(!multiSolution){\n                segmentedResult = {solution:segmentResults[0]}\n            }\n            else{\n                segmentedResult = {solution:segmentResults}\n            }\n        }\n\n        if (verbose){\n            segmentedResult.push({Mode})\n        }\n        return segmentedResult\n    }\n\n    this.safe_segment = function(remainText){\n        if (failSegmentRemainText.includes(remainText))\n            return false;\n        if (!multipleSafeResult)\n            if (globalResult.length > 0)    \n                return ;\n\n        assert(result.join(\"\") + remainText == inputWord)\n\n        if (remainText.length > 0){\n            var FirstChar = remainText[0]\n            if (this.isLeadingChar(FirstChar)){\n                var Prefixes = trie.prefixes(remainText)\n                var resultOrCount = false\n                for (var i = Prefixes.length - 1; i >= 0; i-- ){\n                    var selectedPrefix = Prefixes[i]['k']\n                    result.push(selectedPrefix)\n                    suffixRemainText = remainText.substr(selectedPrefix.length)\n                    var prefixResult = this.safe_segment(suffixRemainText)\n                    result.pop()\n                    resultOrCount = resultOrCount || prefixResult\n                }\n\n                if (!resultOrCount)\n                    failSegmentRemainText.push(remainText)\n            }\n            else{\n                if (printable.includes(FirstChar)){\n                    if (punctuation.includes(FirstChar)){\n                        var j = 0\n                        while (punctuation.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.safe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                    if (whitespace.includes(FirstChar)){\n                        var j = 0\n                        while (whitespace.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.safe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                    if (digits.includes(FirstChar)){\n                        var j = 0\n                        while (digits.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.safe_segment(remainText.substr(j), trie)\n                        result.pop()\n                    }\n                    if (ascii_letters.includes(FirstChar)){\n                        var j = 0\n                        while (ascii_letters.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.safe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                }\n                else{\n                    result.push(remainText[0])\n                    this.safe_segment(remainText.substr(1))\n                    result.pop()\n                }\n            }\n            \n        }\n        else{\n            globalResult.push(result.slice(0))\n            return true\n        }\n    }\n\n    this.unsafe_segment = function(remainText){\n        if (globalResult.length > 0)    \n            return false;\n        \n        assert(result.join(\"\") + remainText == inputWord)\n       \n        if (remainText.length > 0){\n            var FirstChar = remainText[0]\n            if (this.isLeadingChar(FirstChar)){\n                Prefixes = trie.prefixes(remainText)\n                for ( i = Prefixes.length-1; i >= 0; i-- ){\n                    result.push(Prefixes[i]['k'])\n                    this.unsafe_segment(remainText.substr(Prefixes[i]['k'].length))\n                    result.pop()\n                }\n                var j = 0\n                var unsafePrefixes = \"\"\n                while( j < remainText.length){\n                    Prefixes = trie.prefixes(remainText.substr(j))\n                    j++\n                    if (Prefixes.length > 0){\n                        unsafePrefixes = remainText.substr(0,j-1)\n                        break;\n                    }\n                    else{\n                        unsafePrefixes = remainText.substr(0,j)\n                    }\n                    if (j == remainText.length){\n                        unsafePrefixes = remainText\n                        break\n                    }\n                    if (!this.isLeadingChar(remainText[j])){\n                        unsafePrefixes = remainText.substr(0,j)\n                        break\n                    }\n                }\n                result.push(unsafePrefixes)\n                this.unsafe_segment(remainText.substr(unsafePrefixes.length))\n                result.pop()\n            }\n            else{\n                if (printable.includes(FirstChar)){\n                    if (punctuation.includes(FirstChar)){\n                        var j = 0\n                        while (punctuation.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.unsafe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                    if (whitespace.includes(FirstChar)){\n                        var j = 0\n                        while (whitespace.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.unsafe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                    if (digits.includes(FirstChar)){\n                        var j = 0\n                        while (digits.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.unsafe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                    if (ascii_letters.includes(FirstChar)){\n                        var j = 0\n                        while (ascii_letters.includes(remainText[j])){\n                            j+=1\n                            if (remainText.length == j)\n                                break;\n                        }\n                        result.push(remainText.substr(0,j))\n                        this.unsafe_segment(remainText.substr(j))\n                        result.pop()\n                    }\n                }\n                else{\n                    result.push(remainText[0])\n                    this.unsafe_segment(remainText.substr(1))\n                    result.pop()\n                }\n            }\n        }\n        else{\n            globalResult.push(result.slice(0))\n        }\n    }\n}\n\nmodule.exports = ThaiAnalyzer\n"]},"metadata":{},"sourceType":"script"}